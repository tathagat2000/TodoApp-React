{"version":3,"sources":["components/Snackbar.js","components/SnackbarProvider.js","constants.js","icons.js","components/BulkActionPanel.js","components/FilterPanel.js","components/Analytics.js","components/Todo.js","components/TodoList.js","components/OptionList.js","components/TodoForm.js","components/EditWindow.js","components/Modal.js","components/TodoFormContainer.js","Server.js","hooks/useTodoState.js","hooks/useFilterState.js","components/TodoApp.js","hooks/useOverlay.js","components/Header.js","App.js","index.js"],"names":["Snackbar","message","className","SnackbarContext","React","createContext","SnackbarProvider","children","timeout","useRef","useState","show","undefined","snackbar","setSnackbar","showSnackbar","useCallback","clearTimeout","current","setTimeout","Provider","value","useSnackbar","useContext","URGENCY","LOW","MEDIUM","HIGH","CATEGORY","PERSONAL","ACADEMIC","SOCIAL","ACTIONS","icons","icon","faExclamationTriangle","faUser","faBook","faUsers","faEdit","faTrash","faCheckCircle","faSquare","BulkActionPanel","memo","selectedTodoIds","onTodoAction","updateCompletedValue","isCompleted","type","payload","ids","then","catch","onClick","id","IconButton","isSelected","handleClick","data-name","FILTER_OBJECT","Object","assign","FILTERS","entries","map","FilterPanel","filterState","toggleFilterState","event","element","target","closest","dataset","name","key","Analytics","numerator","denominator","todos","numberOfTodos","length","numberOfCompletedTodos","filter","todo","ratioInDecimal","Math","round","rationInFraction","Todo","onEdit","todoClassName","data-id","text","time","urgency","category","TodoList","includes","OptionList","TodoForm","onChange","data","data-type","placeholder","EditWindow","initialData","onClose","updatedTodo","setUpdatedTodo","updateState","prev","Modal","INITIAL_TODO","TodoFormContainer","setTodo","prevTodo","onKeyPress","keyCode","which","todoObject","Date","valueOf","toLocaleDateString","toLocaleTimeString","createTodoObject","server","isServerWorking","random","FailProbability","getTodo","Promise","resolve","reject","saveDataInLocalStorage","localStorage","setItem","JSON","stringify","loadDataFromLocalStorage","parse","getItem","findIndexOfTodoById","findIndex","createTodo","todoList","_castArray","deleteTodo","todoIds","todoIdsList","updateTodo","this","sortTodos","todo1","todo2","reducer","todoState","action","concat","updatedTodoIds","updatedTodos","sort","initialFilterState","useFilterState","setFilterState","filterTodos","urgencyFilter","computeUrgencyFilterValue","categoryFilter","computeCategoryFilterValue","filterAccordingToUrgencyAndCategory","TodoApp","useReducer","dispatch","setSelectedTodoIds","showSnackbarRef","useEffect","findTodoById","find","updatedTodosList","todoId","useTodoState","overlay","setOverlay","showOverlay","closeOverlay","useOverlay","filteredTodos","useMemo","Header","toDateString","date","setDate","intervalId","setInterval","clearInterval","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d249f1b.chunk.js","sourcesContent":["const Snackbar = ({ message }) => <div className=\"snackbar\">{message}</div>;\n\nexport { Snackbar };\n","import React, { useState, useCallback, useRef, useContext } from \"react\";\n\nimport { Snackbar } from \"./Snackbar\";\n\nconst SnackbarContext = React.createContext();\n\nconst SnackbarProvider = ({ children }) => {\n  const timeout = useRef();\n  const [snackbar, setSnackbar] = useState({ show: false, message: undefined });\n\n  const showSnackbar = useCallback((message) => {\n    clearTimeout(timeout.current);\n    setSnackbar({ show: true, message });\n    timeout.current = setTimeout(() => {\n      setSnackbar({ show: false, message: undefined });\n    }, 1500);\n  }, []);\n\n  return (\n    <SnackbarContext.Provider value={showSnackbar}>\n      {children}\n      {snackbar.show && <Snackbar message={snackbar.message} />}\n    </SnackbarContext.Provider>\n  );\n};\n\nconst useSnackbar = () => useContext(SnackbarContext);\n\nexport { SnackbarProvider, useSnackbar };\n","export const URGENCY = {\n  LOW: \"Low\",\n  MEDIUM: \"Medium\",\n  HIGH: \"High\",\n};\n\nexport const CATEGORY = {\n  PERSONAL: \"Personal\",\n  ACADEMIC: \"Academic\",\n  SOCIAL: \"Social\",\n};\n\nexport const ACTIONS = {\n  EDIT: \"EDIT\",\n  DELETE: \"DELETE\",\n  BULKCOMPLETE: \"BULKCOMPLETE\",\n  BULKINCOMPLETE: \"BULKINCOMPLETE\",\n  BULKDELETE: \"BULKDELETE\",\n  RESET: \"RESET\",\n  UPDATE: \"UPDATE\",\n  ADD: \"ADD\",\n  SET_ISCOMPLETED: \"SET_ISCOMPLETED\",\n  TOGGLE_SELECTED_TODO: \"TOGGLE_SELECTED_TODO\",\n  RESET_SELECTED_TODOS: \"RESET_SELECTED_TODOS\",\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBook,\n  faCheckCircle,\n  faEdit,\n  faExclamationTriangle,\n  faSquare,\n  faTrash,\n  faUser,\n  faUsers,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { CATEGORY, URGENCY, ACTIONS } from \"./constants\";\n\nexport const icons = {\n  [URGENCY.LOW]: (\n    <FontAwesomeIcon className=\"cgrey\" icon={faExclamationTriangle} />\n  ),\n  [URGENCY.MEDIUM]: (\n    <FontAwesomeIcon className=\"corange\" icon={faExclamationTriangle} />\n  ),\n\n  [URGENCY.HIGH]: (\n    <FontAwesomeIcon className=\"cred\" icon={faExclamationTriangle} />\n  ),\n\n  [CATEGORY.PERSONAL]: <FontAwesomeIcon className=\"cblue\" icon={faUser} />,\n  [CATEGORY.ACADEMIC]: <FontAwesomeIcon className=\"cgrey\" icon={faBook} />,\n  [CATEGORY.SOCIAL]: <FontAwesomeIcon className=\"cpink\" icon={faUsers} />,\n  [ACTIONS.EDIT]: <FontAwesomeIcon icon={faEdit} />,\n  [ACTIONS.DELETE]: <FontAwesomeIcon icon={faTrash} />,\n  [ACTIONS.BULKCOMPLETE]: <FontAwesomeIcon icon={faCheckCircle} />,\n  [ACTIONS.BULKINCOMPLETE]: <FontAwesomeIcon icon={faSquare} />,\n  [ACTIONS.BULKDELETE]: <FontAwesomeIcon icon={faTrash} />,\n};\n","import React from \"react\";\n\nimport { useSnackbar } from \"./SnackbarProvider\";\n\nimport { ACTIONS } from \"../constants\";\nimport { icons } from \"../icons\";\n\nconst BulkActionPanel = React.memo(({ selectedTodoIds, onTodoAction }) => {\n  const showSnackbar = useSnackbar();\n\n  const updateCompletedValue = (isCompleted) => {\n    onTodoAction({\n      type: ACTIONS.SET_ISCOMPLETED,\n      payload: { ids: selectedTodoIds, isCompleted },\n    })\n      .then(() => {\n        onTodoAction({\n          type: ACTIONS.RESET_SELECTED_TODOS,\n        });\n      })\n      .catch(showSnackbar);\n  };\n\n  const onDelete = () => {\n    onTodoAction({\n      type: ACTIONS.DELETE,\n      payload: { id: selectedTodoIds },\n    })\n      .then(() => {\n        onTodoAction({\n          type: ACTIONS.RESET_SELECTED_TODOS,\n        });\n      })\n      .catch(showSnackbar);\n  };\n\n  const setComplete = () => updateCompletedValue(true);\n  const setIncomplete = () => updateCompletedValue(false);\n\n  return (\n    <>\n      <div className=\"bulk-selection\">\n        <div className=\"complete-selection\">\n          <div className=\"hidden-text-complete-selection\">\n            Mark Selection Complete\n          </div>\n          <button className=\"round\" onClick={setComplete}>\n            {icons[ACTIONS.BULKCOMPLETE]}\n          </button>\n        </div>\n\n        <div className=\"incomplete-selection\">\n          <span className=\"hidden-text-incomplete-selection\">\n            Mark Selection Incomplete\n          </span>\n          <button className=\"round\" onClick={setIncomplete}>\n            {icons[ACTIONS.BULKINCOMPLETE]}\n          </button>\n        </div>\n\n        <div className=\"delete-selection\">\n          <span className=\"hidden-text-delete-selection\">Delete Selection</span>\n          <button className=\"round\" onClick={onDelete}>\n            {icons[ACTIONS.BULKDELETE]}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport { BulkActionPanel };\n","import React, { useCallback } from \"react\";\n\nimport { URGENCY, CATEGORY } from \"../constants\";\nimport { icons } from \"../icons\";\n\nconst IconButton = React.memo(({ value, isSelected, handleClick }) => (\n  <>\n    <button\n      onClick={handleClick}\n      className={isSelected ? \"icon larger\" : \"icon\"}\n      data-name={value}\n    >\n      {icons[value]}\n    </button>\n  </>\n));\n\nconst FILTER_OBJECT = Object.assign({}, URGENCY, CATEGORY);\nconst FILTERS = Object.entries(FILTER_OBJECT).map(([key, value]) => [\n  key,\n  value,\n]);\n\nconst FilterPanel = React.memo(({ filterState, toggleFilterState }) => {\n  const handleClick = useCallback(\n    (event) => {\n      const element = event.target.closest(\"[data-name]\");\n      if (element) {\n        toggleFilterState(element.dataset.name);\n      }\n    },\n    [toggleFilterState]\n  );\n\n  return (\n    <>\n      <div className=\"filter curve\">\n        <div className=\"logos\">\n          {FILTERS.map(([key, value]) => (\n            <IconButton\n              handleClick={handleClick}\n              isSelected={filterState[value]}\n              value={value}\n              key={key}\n            />\n          ))}\n        </div>\n        <p className=\"filter-text\">Filter Todos</p>\n      </div>\n    </>\n  );\n});\n\nexport { FilterPanel };\n","import React from \"react\";\n\nconst getRatioInDecimal = (numerator, denominator) => {\n  let value;\n  if (denominator === 0) {\n    value = 0;\n  } else {\n    value = Math.round((100 * numerator) / denominator);\n  }\n  return value + \" % \";\n};\n\nconst Analytics = React.memo(({ todos }) => {\n  const numberOfTodos = todos.length;\n  const numberOfCompletedTodos = todos.filter(\n    (todo) => todo.isCompleted === true\n  ).length;\n\n  const ratioInDecimal = getRatioInDecimal(\n    numberOfCompletedTodos,\n    numberOfTodos\n  );\n  const rationInFraction = numberOfCompletedTodos + \" / \" + numberOfTodos;\n\n  return (\n    <div className=\"analytics curve\">\n      <div className=\"circle\">\n        <div className=\"percent\">{ratioInDecimal}</div>\n        <div className=\"ratio\">{rationInFraction}</div>\n      </div>\n      <p className=\"analytics-text\">Analytics</p>\n    </div>\n  );\n});\n\nexport { Analytics };\n","import React from \"react\";\n\nimport { useSnackbar } from \"./SnackbarProvider\";\n\nimport { ACTIONS } from \"../constants\";\nimport { icons } from \"../icons\";\n\nconst Todo = React.memo(({ todo, onTodoAction, onEdit, isSelected }) => {\n  const showSnackbar = useSnackbar();\n\n  const onToggleComplete = () => {\n    onTodoAction({\n      type: ACTIONS.SET_ISCOMPLETED,\n      payload: { ids: [todo.id], isCompleted: !todo.isCompleted },\n    }).catch(showSnackbar);\n  };\n\n  const onDelete = () => {\n    onTodoAction({\n      type: ACTIONS.DELETE,\n      payload: { id: todo.id },\n    }).catch(showSnackbar);\n  };\n\n  const onSelect = () => {\n    onTodoAction({\n      type: ACTIONS.TOGGLE_SELECTED_TODO,\n      payload: { id: todo.id },\n    });\n  };\n\n  const handleEdit = () => {\n    onEdit(todo);\n  };\n\n  let todoClassName = \"todo\";\n  if (todo.isCompleted) {\n    todoClassName = todoClassName + \" opacity\";\n  }\n  if (isSelected) {\n    todoClassName = todoClassName + \" selected\";\n  }\n\n  return (\n    <div className={todoClassName} data-id={todo.id}>\n      <div className=\"buttons\">\n        <button className=\"edit\" onClick={handleEdit}>\n          {icons[ACTIONS.EDIT]}\n        </button>\n        <button className=\"delete\" onClick={onDelete}>\n          {icons[ACTIONS.DELETE]}\n        </button>\n      </div>\n\n      <div className=\"todo-text\">{todo.text}</div>\n\n      <div className=\"time\">{todo.time}</div>\n\n      <div className=\"symbols\">\n        {icons[todo.urgency]}\n        {icons[todo.category]}\n      </div>\n\n      <div className=\"complete\">\n        <button className=\"complete-button\" onClick={onToggleComplete}>\n          {todo.isCompleted ? \"Completed. Undo?\" : \"Mark Complete\"}\n        </button>\n      </div>\n\n      <div\n        className={isSelected ? \"select-button bgRed\" : \"select-button bgWhite\"}\n        onClick={onSelect}\n      ></div>\n    </div>\n  );\n});\n\nexport { Todo };\n\n//DOUBT should functions be memoized here?\n","import React from \"react\";\n\nimport { Todo } from \"./Todo\";\n\nconst TodoList = React.memo(\n  ({ todos, onTodoAction, selectedTodoIds, onEdit }) => (\n    <>\n      <div className=\"todo-list\">\n        {todos.map((todo) => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            onTodoAction={onTodoAction}\n            onEdit={onEdit}\n            isSelected={selectedTodoIds.includes(todo.id)}\n          />\n        ))}\n      </div>\n    </>\n  )\n);\n\nexport { TodoList };\n//DOUBT does it make sense to memoize Todo?\n//React.memo remembers previous memoized value, or many memoized values?\n","import React from \"react\";\n\nconst OptionList = React.memo(({ value }) => (\n  <>\n    {Object.entries(value).map(([key, value]) => (\n      <option value={value} key={key}>\n        {value}\n      </option>\n    ))}\n  </>\n));\n\nexport { OptionList };\n","import React from \"react\";\n\nimport { OptionList } from \"./OptionList\";\n\nimport { CATEGORY, URGENCY } from \"../constants\";\n\nconst TodoForm = React.memo(({ onChange, data }) => (\n  <>\n    <input\n      data-type=\"text\"\n      value={data.text}\n      type=\"text\"\n      className=\"add-todo\"\n      placeholder=\"Add Your Todo...\"\n      onChange={onChange}\n    />\n    <div className=\"urgency\">\n      <p className=\"text\">Urgency</p>\n      <select\n        value={data.urgency}\n        data-type={\"urgency\"}\n        className=\"selector\"\n        onChange={onChange}\n      >\n        <OptionList value={URGENCY} />\n      </select>\n    </div>\n    <div className=\"category\">\n      <p className=\"text\">Category</p>\n      <select\n        value={data.category}\n        data-type=\"category\"\n        className=\"selector\"\n        onChange={onChange}\n      >\n        <OptionList value={CATEGORY} />\n      </select>\n    </div>\n  </>\n));\n\nexport { TodoForm };\n","import React, { useCallback, useState } from \"react\";\n\nimport { useSnackbar } from \"./SnackbarProvider\";\n\nimport { ACTIONS } from \"../constants\";\nimport { TodoForm } from \"./TodoForm\";\n\nconst EditWindow = React.memo(({ initialData, onClose, onTodoAction }) => {\n  const [updatedTodo, setUpdatedTodo] = useState(initialData);\n  const showSnackbar = useSnackbar();\n\n  const updateState = useCallback((event) => {\n    setUpdatedTodo((prev) => ({\n      ...prev,\n      [event.target.dataset.type]: event.target.value,\n    }));\n  }, []);\n\n  const onSave = () => {\n    onTodoAction({\n      type: ACTIONS.UPDATE,\n      payload: { updatedTodo },\n    })\n      .then(onClose)\n      .catch(showSnackbar);\n  };\n\n  return (\n    <>\n      <TodoForm onChange={updateState} data={updatedTodo} />\n      <div className=\"modal-buttons\">\n        <button className=\"cancel\" onClick={onClose}>\n          Cancel\n        </button>\n        <button className=\"save\" onClick={onSave}>\n          Save\n        </button>\n      </div>\n    </>\n  );\n});\n\nexport { EditWindow };\n","const Modal = ({ children }) => {\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">{children}</div>\n    </div>\n  );\n};\n\nexport { Modal };\n","import React, { useCallback, useState } from \"react\";\n\nimport { TodoForm } from \"./TodoForm\";\n\nimport { useSnackbar } from \"./SnackbarProvider\";\n\nimport { ACTIONS, CATEGORY, URGENCY } from \"../constants\";\n\nconst INITIAL_TODO = {\n  text: \"\",\n  urgency: URGENCY.LOW,\n  category: CATEGORY.PERSONAL,\n};\n\nconst getCurrentTime = () =>\n  new Date().toLocaleDateString() + \", \" + new Date().toLocaleTimeString();\n\nconst createTodoObject = (todo) => ({\n  ...todo,\n  id: new Date().valueOf(),\n  isCompleted: false,\n  time: getCurrentTime(),\n});\n\nconst TodoFormContainer = React.memo(({ onTodoAction }) => {\n  const [todo, setTodo] = useState(INITIAL_TODO);\n  const showSnackbar = useSnackbar();\n\n  const handleKeyPress = (event) => {\n    const enterKey = event.keyCode || event.which || 0;\n    if (enterKey === 13 && todo.text) {\n      const todoObject = createTodoObject(todo);\n      onTodoAction({\n        type: ACTIONS.ADD,\n        payload: { todo: todoObject },\n      })\n        .then(() => {\n          setTodo(INITIAL_TODO);\n        })\n        .catch(showSnackbar);\n    }\n  };\n\n  const updateState = useCallback((event) => {\n    setTodo((prevTodo) => ({\n      ...prevTodo,\n      [event.target.dataset.type]: event.target.value,\n    }));\n  }, []);\n\n  return (\n    <>\n      <div className=\"create-todo curve\" onKeyPress={handleKeyPress}>\n        <div className=\"create-text\">Create Todo</div>\n        <TodoForm onChange={updateState} data={todo} />\n      </div>\n    </>\n  );\n});\n\nexport { TodoFormContainer };\n","import _castArray from \"lodash/castArray\";\n\nclass Server {\n  constructor() {\n    this.data = this.loadDataFromLocalStorage();\n    this.FailProbability = 0.01;\n  }\n\n  isServerWorking = () => {\n    if (Math.random() > this.FailProbability) {\n      return true;\n    }\n    return false;\n  };\n\n  getTodo = () => {\n    return new Promise((resolve, reject) => {\n      if (this.isServerWorking()) {\n        resolve(this.data);\n      } else {\n        reject(\"Please Refresh Again\");\n      }\n    });\n  };\n\n  saveDataInLocalStorage = () =>\n    localStorage.setItem(\"todos\", JSON.stringify(this.data));\n\n  loadDataFromLocalStorage = () =>\n    JSON.parse(localStorage.getItem(\"todos\")) || [];\n\n  findIndexOfTodoById = (id) => this.data.findIndex((todo) => todo.id === id);\n\n  createTodo = (todos) => {\n    const todoList = _castArray(todos);\n    return new Promise((resolve, reject) => {\n      if (this.isServerWorking()) {\n        this.data = [...this.data, ...todoList];\n        this.saveDataInLocalStorage();\n        resolve(\"done\");\n      } else {\n        reject(\"Could Not Add Todo\");\n      }\n    });\n  };\n\n  deleteTodo = (todoIds) => {\n    const todoIdsList = _castArray(todoIds);\n\n    return new Promise((resolve, reject) => {\n      if (this.isServerWorking()) {\n        this.data = this.data.filter((todo) => {\n          return !todoIdsList.includes(todo.id);\n        });\n        this.saveDataInLocalStorage();\n\n        resolve(\"done\");\n      } else {\n        reject(\"Could Not Delete Todo\");\n      }\n    });\n  };\n\n  updateTodo = (todos) => {\n    const todoList = _castArray(todos);\n    const todoIds = todoList.map((todo) => todo.id);\n    return new Promise((resolve, reject) => {\n      if (this.isServerWorking()) {\n        this.data = this.data.filter((todo) => !todoIds.includes(todo.id));\n        this.data = [...this.data, ...todoList];\n        this.saveDataInLocalStorage();\n        resolve(\"done\");\n      } else {\n        reject(\"Could Not Update Todo\");\n      }\n    });\n  };\n}\n\nconst server = new Server();\nexport { server };\n","import { useCallback, useRef, useEffect, useReducer, useState } from \"react\";\nimport _castArray from \"lodash/castArray\";\n\nimport { useSnackbar } from \"../components/SnackbarProvider\";\nimport { server } from \"../Server\";\n\nimport { ACTIONS } from \"../constants\";\n\nconst sortTodos = (todo1, todo2) => todo1.id - todo2.id;\n\nconst reducer = (todoState, action) => {\n  switch (action.type) {\n    case ACTIONS.ADD:\n      return todoState.concat(action.payload.todos);\n\n    case ACTIONS.DELETE:\n      return todoState.filter(\n        (todo) => !action.payload.todoIds.includes(todo.id)\n      );\n\n    case ACTIONS.UPDATE:\n      const updatedTodoIds = action.payload.updatedTodos.map((todo) => todo.id);\n      return todoState\n        .filter((todo) => !updatedTodoIds.includes(todo.id))\n        .concat(action.payload.updatedTodos)\n        .sort(sortTodos);\n\n    default:\n      return todoState;\n  }\n};\n\nconst useTodoState = () => {\n  const [todoState, dispatch] = useReducer(reducer, []);\n  const [selectedTodoIds, setSelectedTodoIds] = useState([]);\n\n  const showSnackbar = useSnackbar();\n  const showSnackbarRef = useRef();\n  showSnackbarRef.current = showSnackbar;\n\n  useEffect(() => {\n    server\n      .getTodo()\n      .then((todoList) => {\n        dispatch({\n          type: ACTIONS.ADD,\n          payload: { todos: todoList.sort(sortTodos) },\n        });\n      })\n      .catch(showSnackbarRef.current);\n  }, []);\n\n  const findTodoById = useCallback(\n    (id) => todoState.find((todo) => todo.id === id),\n    [todoState]\n  );\n\n  const onTodoAction = useCallback(\n    (action) => {\n      switch (action.type) {\n        case ACTIONS.ADD: {\n          const todos = action.payload.todo;\n          return server.createTodo(todos).then(() => {\n            const todoList = _castArray(todos);\n            dispatch({\n              type: ACTIONS.ADD,\n              payload: { todos: todoList },\n            });\n          });\n        }\n\n        case ACTIONS.UPDATE: {\n          const updatedTodos = action.payload.updatedTodo;\n          return server.updateTodo(updatedTodos).then(() => {\n            const updatedTodosList = _castArray(updatedTodos);\n            dispatch({\n              type: ACTIONS.UPDATE,\n              payload: { updatedTodos: updatedTodosList },\n            });\n            //DOUBT\n          });\n        }\n\n        case ACTIONS.DELETE: {\n          const todoIds = action.payload.id;\n          return server.deleteTodo(todoIds).then(() => {\n            const todoIdsList = _castArray(todoIds);\n            dispatch({\n              type: ACTIONS.DELETE,\n              payload: { todoIds: todoIdsList },\n            });\n          });\n        }\n\n        case ACTIONS.SET_ISCOMPLETED: {\n          const isCompleted = action.payload.isCompleted;\n          const updatedTodos = action.payload.ids\n            .map(findTodoById)\n            .map((todo) => ({ ...todo, isCompleted }));\n\n          return server.updateTodo(updatedTodos).then(() => {\n            const updatedTodosList = _castArray(updatedTodos);\n            dispatch({\n              type: ACTIONS.UPDATE,\n              payload: { updatedTodos: updatedTodosList },\n            });\n          });\n        }\n\n        case ACTIONS.TOGGLE_SELECTED_TODO: {\n          const id = action.payload.id;\n          return setSelectedTodoIds((prev) => {\n            if (prev.includes(id)) {\n              return prev.filter((todoId) => todoId !== id);\n            } else {\n              return prev.concat(id);\n            }\n          });\n        }\n\n        case ACTIONS.RESET_SELECTED_TODOS: {\n          return setSelectedTodoIds([]);\n        }\n\n        default:\n          break;\n      }\n    },\n    [findTodoById]\n  );\n\n  return { todoState, onTodoAction, selectedTodoIds };\n};\n\nexport { useTodoState };\n","import { useState, useCallback } from \"react\";\n\nimport { URGENCY, CATEGORY } from \"../constants\";\n\nconst initialFilterState = {\n  [URGENCY.LOW]: false,\n  [URGENCY.MEDIUM]: false,\n  [URGENCY.HIGH]: false,\n  [CATEGORY.PERSONAL]: false,\n  [CATEGORY.ACADEMIC]: false,\n  [CATEGORY.SOCIAL]: false,\n};\nconst computeUrgencyFilterValue = (filterState) =>\n  filterState[URGENCY.LOW] ||\n  filterState[URGENCY.MEDIUM] ||\n  filterState[URGENCY.HIGH];\n\nconst computeCategoryFilterValue = (filterState) =>\n  filterState[CATEGORY.PERSONAL] ||\n  filterState[CATEGORY.ACADEMIC] ||\n  filterState[CATEGORY.SOCIAL];\n\nconst filterAccordingToUrgencyAndCategory = (filterState, todos) =>\n  todos.filter(\n    (todo) => filterState[todo.urgency] || filterState[todo.category]\n  );\n\nconst useFilterState = () => {\n  const [filterState, setFilterState] = useState(initialFilterState);\n\n  const toggleFilterState = useCallback((filter) => {\n    setFilterState((prev) => ({ ...prev, [filter]: !prev[filter] }));\n  }, []);\n\n  const filterTodos = useCallback(\n    (todos) => {\n      const urgencyFilter = computeUrgencyFilterValue(filterState);\n      const categoryFilter = computeCategoryFilterValue(filterState);\n      if (urgencyFilter === false && categoryFilter === false) {\n        return todos;\n      }\n      return filterAccordingToUrgencyAndCategory(filterState, todos);\n    },\n    [filterState]\n  );\n\n  return { filterState, filterTodos, toggleFilterState };\n};\n\nexport { useFilterState };\n","import React, { useMemo } from \"react\";\n\nimport { BulkActionPanel } from \"./BulkActionPanel\";\nimport { FilterPanel } from \"./FilterPanel\";\nimport { Analytics } from \"./Analytics\";\nimport { TodoList } from \"./TodoList\";\nimport { EditWindow } from \"./EditWindow\";\nimport { Modal } from \"./Modal\";\nimport { TodoFormContainer } from \"./TodoFormContainer\";\n\nimport { useTodoState } from \"../hooks/useTodoState\";\nimport { useFilterState } from \"../hooks/useFilterState\";\nimport { useOverlay } from \"../hooks/useOverlay\";\n\nconst TodoApp = () => {\n  const { todoState: todos, onTodoAction, selectedTodoIds } = useTodoState();\n  const { filterState, filterTodos, toggleFilterState } = useFilterState();\n  const { overlay, showOverlay, closeOverlay } = useOverlay();\n\n  const filteredTodos = useMemo(() => filterTodos(todos), [filterTodos, todos]);\n\n  return (\n    <>\n      <div className=\"main-body\">\n        <div className=\"column-left curve\">\n          <TodoList\n            todos={filteredTodos}\n            onTodoAction={onTodoAction}\n            selectedTodoIds={selectedTodoIds}\n            onEdit={showOverlay}\n          />\n          <BulkActionPanel\n            selectedTodoIds={selectedTodoIds}\n            onTodoAction={onTodoAction}\n          />\n        </div>\n\n        <div className=\"column-right\">\n          <FilterPanel\n            filterState={filterState}\n            toggleFilterState={toggleFilterState}\n          />\n          <Analytics todos={filteredTodos} />\n          <TodoFormContainer onTodoAction={onTodoAction} />\n        </div>\n      </div>\n      {overlay.show && (\n        <Modal>\n          <EditWindow\n            initialData={overlay.data}\n            onClose={closeOverlay}\n            onTodoAction={onTodoAction}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport { TodoApp };\n","import { useState, useCallback } from \"react\";\n\nconst useOverlay = () => {\n  const [overlay, setOverlay] = useState({ show: false });\n\n  const showOverlay = useCallback((todo) => {\n    setOverlay({ show: true, data: todo });\n  }, []);\n\n  const closeOverlay = useCallback(() => {\n    setOverlay({ show: false });\n  }, []);\n\n  return { overlay, showOverlay, closeOverlay };\n};\n\nexport { useOverlay };\n","import React, { useEffect, useState } from \"react\";\n\nconst Header = () => {\n  const [date, setDate] = useState(new Date().toDateString());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setDate(new Date().toDateString());\n    }, 60000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"header curve\">\n        <div className=\"date\">{date}</div>\n        <div className=\"heading\">To-Do App</div>\n      </div>\n    </>\n  );\n};\n\nexport { Header };\n","import \"./App.css\";\nimport { TodoApp } from \"./components/TodoApp\";\nimport { Header } from \"./components/Header\";\nimport { SnackbarProvider } from \"./components/SnackbarProvider\";\nfunction App() {\n  return (\n    <>\n      <SnackbarProvider>\n        <Header />\n        <TodoApp />\n      </SnackbarProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}